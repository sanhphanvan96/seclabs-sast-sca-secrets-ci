name: SAST - Semgrep Security Scan

on:
  workflow_dispatch:
  pull_request:
  workflow_call:

permissions:
  contents: read
  pull-requests: write

jobs:
  semgrep:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep CI Scan
        id: scan
        run: |
          semgrep ci --json > semgrep-results.json 2>&1 | tee semgrep-results.txt
        continue-on-error: true

      - name: Display results
        if: always()
        run: |
          echo "## Semgrep Security Scan Results"
          cat semgrep-results.txt

      - name: Process Results
        if: always()
        id: results
        run: |
          # Ensure jq handles empty results safely
          TOTAL=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
          CRITICAL=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-results.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep-results.json 2>/dev/null || echo "0")

          echo "total=${TOTAL}" >> $GITHUB_OUTPUT
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT

          # Format findings for summary
          echo "## üõ°Ô∏è Semgrep Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Summary" >> $GITHUB_STEP_SUMMARY
          echo "- üî• **Critical:** ${CRITICAL}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è **High:** ${HIGH}" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Total Issues:** ${TOTAL}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$TOTAL" -gt 0 ]]; then
            echo "<details><summary>Click to view details</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            jq -r '.results[] | "### " + .path + ":" + (.start.line|tostring) + "\n" +
                  "**üîé Severity:** " + .extra.severity + "\n" +
                  "**üìå Rule:** " + .check_id + "\n" +
                  "**üõë Message:** " + .extra.message + "\n" +
                  "```\n" + .lines + "\n```\n"' semgrep-results.json >> $GITHUB_STEP_SUMMARY

            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with Scan Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const total = Number("${{ steps.results.outputs.total }}");
            let summary = "## üõ°Ô∏è Semgrep Security Scan Results\n\n";

            if (total === 0) {
              summary += "‚úÖ No security issues found.\n";
            } else {
              const results = fs.readFileSync('semgrep-results.txt', 'utf8');
              summary += `‚ö†Ô∏è **${total} security issues detected.**\n\n`;
              summary += "<details><summary>Click to view details</summary>\n\n";
              summary += "```\n" + results.substring(0, 6000) + "\n```\n";  # Limit comment size
              summary += "</details>\n";
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep-results.txt
            semgrep-results.json
